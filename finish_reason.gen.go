// Code generated by "enumer -type=FinishReason -json -trimprefix=FinishReason -transform=snake -output=finish_reason.gen.go"; DO NOT EDIT.

package estellm

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FinishReasonName = "end_turnmax_tokensstop_sequenceguardrail_intervenedcontent_filtered"

var _FinishReasonIndex = [...]uint8{0, 8, 18, 31, 51, 67}

const _FinishReasonLowerName = "end_turnmax_tokensstop_sequenceguardrail_intervenedcontent_filtered"

func (i FinishReason) String() string {
	if i >= FinishReason(len(_FinishReasonIndex)-1) {
		return fmt.Sprintf("FinishReason(%d)", i)
	}
	return _FinishReasonName[_FinishReasonIndex[i]:_FinishReasonIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FinishReasonNoOp() {
	var x [1]struct{}
	_ = x[FinishReasonEndTurn-(0)]
	_ = x[FinishReasonMaxTokens-(1)]
	_ = x[FinishReasonStopSequence-(2)]
	_ = x[FinishReasonGuardrailIntervened-(3)]
	_ = x[FinishReasonContentFiltered-(4)]
}

var _FinishReasonValues = []FinishReason{FinishReasonEndTurn, FinishReasonMaxTokens, FinishReasonStopSequence, FinishReasonGuardrailIntervened, FinishReasonContentFiltered}

var _FinishReasonNameToValueMap = map[string]FinishReason{
	_FinishReasonName[0:8]:        FinishReasonEndTurn,
	_FinishReasonLowerName[0:8]:   FinishReasonEndTurn,
	_FinishReasonName[8:18]:       FinishReasonMaxTokens,
	_FinishReasonLowerName[8:18]:  FinishReasonMaxTokens,
	_FinishReasonName[18:31]:      FinishReasonStopSequence,
	_FinishReasonLowerName[18:31]: FinishReasonStopSequence,
	_FinishReasonName[31:51]:      FinishReasonGuardrailIntervened,
	_FinishReasonLowerName[31:51]: FinishReasonGuardrailIntervened,
	_FinishReasonName[51:67]:      FinishReasonContentFiltered,
	_FinishReasonLowerName[51:67]: FinishReasonContentFiltered,
}

var _FinishReasonNames = []string{
	_FinishReasonName[0:8],
	_FinishReasonName[8:18],
	_FinishReasonName[18:31],
	_FinishReasonName[31:51],
	_FinishReasonName[51:67],
}

// FinishReasonString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FinishReasonString(s string) (FinishReason, error) {
	if val, ok := _FinishReasonNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FinishReasonNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FinishReason values", s)
}

// FinishReasonValues returns all values of the enum
func FinishReasonValues() []FinishReason {
	return _FinishReasonValues
}

// FinishReasonStrings returns a slice of all String values of the enum
func FinishReasonStrings() []string {
	strs := make([]string, len(_FinishReasonNames))
	copy(strs, _FinishReasonNames)
	return strs
}

// IsAFinishReason returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FinishReason) IsAFinishReason() bool {
	for _, v := range _FinishReasonValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FinishReason
func (i FinishReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FinishReason
func (i *FinishReason) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FinishReason should be a string, got %s", data)
	}

	var err error
	*i, err = FinishReasonString(s)
	return err
}
